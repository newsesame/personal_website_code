# Generated by Selenium IDE
import sys
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException



class CoverScraper():
    def setup_method(self,song_title ):
        self.driver = webdriver.Chrome()
        self.keywords = song_title
        self.song = {
            "title": None,
            "cover_url" : None,
            "song_url" : None,
            "artist": None,
            "album": None,
            "release_date": None,
            "lyricist": None,
            "composer": None,
            
        }
        
        


    def teardown_method(self):
        self.driver.quit()

    def test_song(self):

        self.driver.get("https://www.kkbox.com")
    
        self.driver.find_element(By.CSS_SELECTOR, ".pm-search-button").click()
        self.driver.find_element(By.NAME, "q").click()
        self.driver.find_element(By.NAME, "q").send_keys(str(self.keywords))
        self.driver.find_element(By.CSS_SELECTOR, "form > button").click()
        # self.driver.find_element(By.CSS_SELECTOR, "mark-text > .k0").click()


        target = self.driver.find_element(By.CSS_SELECTOR, "song-li a")


        # 最佳歌曲 element shown
        try: 
            _ = self.driver.find_element(By.CSS_SELECTOR, "song-li a")
            flag = True

        # 歌曲 element shown
        except NoSuchElementException:
            flag = False


        if flag:
            target = self.driver.find_element(By.CSS_SELECTOR, "song-li a")
            link = target.get_attribute("href")
        else:
            target = self.driver.find_element(By.CSS_SELECTOR, ".container .single-type mix-song .song-ul song-li a")
            link = target.get_attribute("href")


        # Capture the link of the song page        
        self.song["song_url"] = link
        self.driver.quit()

        # Reset the scraper
        self.driver = webdriver.Chrome()        
        self.driver.get(link)
        
        # Collect Information
        self.song["album"]= self.driver.find_element(By.CSS_SELECTOR, ".album-name .inner").text
        self.song["title"]= self.driver.find_element(By.CSS_SELECTOR, ".title h1").text
        self.song["release_date"]= self.driver.find_element(By.CSS_SELECTOR, ".release").text
        self.song["artist"]= self.driver.find_element(By.CSS_SELECTOR, ".artist a").text
        


        # Capture the composer & lyricist
        try:
            _ = self.driver.find_element(By.CSS_SELECTOR, ".lyrics .no-lyrics-hint")
            flag = False
            
        except NoSuchElementException:
            flag = True
        #     print("Element not found, skipping extraction.")
        # print("element: ", flag)

        if flag:
            data = self.driver.find_element(By.CSS_SELECTOR, ".lyrics p").text.split("     ")

            # Composer/ lyricist is hidden in lyrics p element 
            if len(data)<=1:
                data = self.driver.find_elements(By.CSS_SELECTOR, ".lyrics p")[-1].text
                lines = data.split('\n')
                
                # Usually Composer/ lyricist follows after ":"
                info_lines = [line for line in lines if '：' in line or ':' in line]
                
                # Add newline identifier between every two info lines
                aggregated_info = '\n'.join(info_lines)

                self.song["lyricist"] = aggregated_info
                self.song["composer"] = ''
            
            # Composer/ lyricist is shown in a seperate p element 
            else:
                if len(data) == 2:

                    self.song["lyricist"], self.song["composer"] = data
            
                else:

                    self.song["lyricist"] = data[0] if len(data) > 0 else ""
                    self.song["composer"] = data[1] if len(data) > 1 else ""


        # Composer/ Lyricist not found
        else:
            pass


        target = self.driver.find_element(By.CSS_SELECTOR, ".image .image-container img")
        self.song["cover_url"] = target.get_attribute("src")

        self.driver.close()


# if __name__ == "__main__":
target = sys.argv[1]
test = CoverScraper()
test.setup_method(target)
test.test_song()
test.teardown_method()
print(json.dumps(test.song))

    